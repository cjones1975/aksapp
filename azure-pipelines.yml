trigger:
- main

resources:
- repo: self

variables:
  imageRepo: aksapp
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'digihub-container'
        repository: '$(imageRepo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/dockerfile'
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/kubernetes'
        artifact: 'manifests'
        publishLocation: 'pipeline'
        
- stage: Deploy
  displayName: Deploy to Dev
  dependsOn: Build
  variables:
    acrdevurl: 'digihubcr.azurecr.io'
    replicateNumber: 3
  jobs:
    - deployment: Deploy
      displayName: Deploy to Azure Kubernetes Service
      environment: 'k8sdev.default'
      pool:
        vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:        
            steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'
                artifactName: 'manifests'
                targetPath: '$(Pipeline.Workspace)/manifests'
            - task: replacetokens@5
              displayName: Replace Tokens
              inputs:
                rootDirectory: '$(Pipeline.Workspace)/manifests/'
                targetFiles: 'deployment.yml'
                encoding: 'auto'
                tokenPattern: 'default'
                writeBOM: true
                actionOnMissing: 'warn'
                keepToken: false
                actionOnNoFiles: 'continue'
                enableTransforms: false
                enableRecursion: false
                useLegacyPattern: false
                enableTelemetry: true
            - task: KubernetesManifest@0
              inputs:
                action: 'deploy'
                namespace: 'default'
                manifests: |
                  $(Pipeline.Workspace)/manifests/deployment.yml
                  $(Pipeline.Workspace)/manifests/service.yml
                containers: '$(acrdevurl)/$(imageRepo):$(tag)'
